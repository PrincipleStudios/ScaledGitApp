openapi: 3.0.2
info:
  title: ScaledGitApp API
  version: 1.0.0
  description: ScaledGitApp API

paths:
  /api/env:
    summary: Gets the public API environment data
    get:
      operationId: getInfo
      summary: Gets the public API environment data
      responses:
        200:
          description:
            Contains public environment info that is still useful for developers
            when debugging issues
          content:
            application/json:
              schema:
                type: object
                required:
                  - gitHash
                  - tag
                properties:
                  gitHash:
                    description: Git commit hash
                    type: string
                  tag:
                    description: Build tag id
                    type: string
  /api/locales:
    summary: Gets translations based on a language
    get:
      operationId: getTranslationData
      summary: Gets translations based on a language
      parameters:
        - name: lng
          schema: { type: string }
          required: true
          in: query
        - name: ns
          schema: { type: string }
          required: true
          in: query
      responses:
        200:
          description: An i18next compatible json document containing the translation data
          content:
            application/json:
              schema:
                type: object
                # each additional property at this level is a language
                additionalProperties:
                  type: object
                  # each additional property at this level is a namespace
                  additionalProperties: { type: object, format: any }
  /api/login/schemes:
    get:
      operationId: getLoginSchemes
      summary: Lists the available login schemes
      responses:
        200:
          description: A list of login schemes that the user may leverage for this installation of ScaledGitApp
          content:
            application/json:
              schema:
                type: array
                items: { type: string }
  /api/git/fetch:
    post:
      x-dotnet-mvc-server-controller: GitFetch
      operationId: requestGitFetch
      security:
        - AuthenticatedUser: []
      summary: Request that the git clone is immediately refreshed
      responses:
        200:
          description: The git repo was refreshed successfully
        500:
          description: An unknown error occurred
  /api/git/upstreams:
    get:
      x-dotnet-mvc-server-controller: GitUpstreamData
      operationId: getUpstreamData
      security:
        - AuthenticatedUser: []
      summary: Gets the upstream data for all branches
      responses:
        200:
          description: Upstream branch configuration data
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/BranchConfiguration' }
  /api/git/branch-details:
    post:
      x-dotnet-mvc-server-controller: GitBranchDetails
      operationId: getBranchDetails
      security:
        - AuthenticatedUser: []
      summary: Gets the upstream data for a specific branch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                branch: { type: string }
              required:
                - branch
      responses:
        200:
          description: Upstream branch configuration data
          content:
            application/json:
              schema: { $ref: '#/components/schemas/BranchDetails' }
  /api/git/detect-conflicts:
    post:
      x-dotnet-mvc-server-controller: GitDetectConflicts
      operationId: getConflictDetails
      security:
        - AuthenticatedUser: []
      summary: Gets the conflict details between two branches
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                branches:
                  type: array
                  minItems: 1
                  items: { type: string }
              required:
                - branches
      responses:
        200:
          description: Conflict detection results
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ConflictAnalysis' }
        400:
          description: Bad Request
        409:
          description: >-
            Git conflicts could not be determined; the given branches must have
            all branches up-to-date with their upstreams for accurate results.
          content:
            application/json:
              schema:
                type: array
                description: >-
                  Contains the upstream branch details for branches that must be
                  updated before other conflicts may be detected.
                items: { $ref: '#/components/schemas/BranchDetails' }
components:
  schemas:
    BranchConfiguration:
      type: object
      required:
        - name
        - color
        - type
        - upstream
        - downstream
      properties:
        name: { type: string }
        color: { type: string }
        type: { type: string }
        upstream:
          type: array
          items: { $ref: '#/components/schemas/Branch' }
        downstream:
          type: array
          items: { $ref: '#/components/schemas/Branch' }
    BranchDetails:
      type: object
      required:
        - name
        - color
        - type
        - exists
        - nonMergeCommitCount
        - upstream
        - downstream
      properties:
        name: { type: string }
        color: { type: string }
        type: { type: string }
        exists: { type: boolean }
        nonMergeCommitCount: { type: integer }
        upstream:
          type: array
          items: { $ref: '#/components/schemas/DetailedUpstreamBranch' }
        downstream:
          type: array
          items: { $ref: '#/components/schemas/Branch' }
    Branch:
      type: object
      required:
        - name
        - color
        - type
      properties:
        name: { type: string }
        color: { type: string }
        type: { type: string }
    ConflictAnalysis:
      type: object
      required:
        - branches
        - conflicts
      properties:
        branches:
          type: array
          items: { $ref: '#/components/schemas/Branch' }
        conflicts:
          type: array
          items: { $ref: '#/components/schemas/ConflictDetails' }
    ConflictDetails:
      type: object
      required:
        - branches
        - candidateIntegrationBranch
        - files
        - mergeTree
        - messages
      properties:
        branches:
          type: array
          minItems: 1
          items: { $ref: '#/components/schemas/Branch' }
        candidateIntegrationBranch:
          type: array
          items: { $ref: '#/components/schemas/Branch' }
        files:
          type: array
          minItems: 1
          items: { $ref: '#/components/schemas/FileConflictDetails' }
        mergeTree:
          type: string
        messages:
          type: array
          items: { type: string }
    DetailedUpstreamBranch:
      type: object
      required:
        - name
        - color
        - type
        - exists
        - behindCount
        - hasConflict
      properties:
        name: { type: string }
        color: { type: string }
        type: { type: string }
        exists: { type: boolean }
        behindCount: { type: integer }
        hasConflict: { type: boolean }
    FileConflictDetails:
      type: object
      required:
        - path
      properties:
        path: { type: string }
        mergeBase: { $ref: '#/components/schemas/FileSnapshot' }
        left: { $ref: '#/components/schemas/FileSnapshot' }
        right: { $ref: '#/components/schemas/FileSnapshot' }
    FileSnapshot:
      type: object
      required:
        - mode
        - hash
      properties:
        mode: { type: string }
        hash: { type: string }

  securitySchemes:
    AuthenticatedUser:
      type: apiKey
      in: cookie
      name: .AspNetCore.Cookies
